#!/bin/bash
#
#
# 1st argument: project name
# 2nd argument: Tinker parameter file
#
tinkerdir=`grep "Tinker" Infos.dat | awk '{ print $2 }'`
templatedir=`grep "Template" Infos.dat | awk '{ print $2 }'`
retstereo=`grep "RetStereo" Infos.dat | awk '{ print $2 }'`
Step=`grep "Step" Infos.dat | awk '{ print $2 }'`
Project=$1
xyzfile=$1.xyz
prm=$2
if [ -z $Project ]; then
   echo "Something wrong!"
   exit 0
fi
#
# I start writing $Project.key
#
echo "parameters $prm" > $Project.key
echo "" >> $Project.key
#
# Getting the retinal atoms in file retnum, and finding the 1st and last atom
#
awk '{ if ( $6 == 2012 || $6 == 2013 || $6 == 2014 ) print $0 }' $xyzfile > retnum
startret=`cat retnum | head -n 1 | awk '{ print $1 }'`
endret=`cat retnum | tail -n 1 | awk '{ print $1 }'`
#
# last-first plus one gives the number of retinal atoms
#
retatoms=$(($endret-$startret+1))
#
# retinal atoms + 5 QM lysine atoms + 9 MM lysine sidechain gives the total
# 5+9=14. When retinal is neutral. there are just 4 QM lysine atoms
#
if [[ $retstereo == "nAT" ]]; then
   lysqm=4
else
   lysqm=5 
fi
qmmmatoms=$(($retatoms+9+$lysqm))
echo "QMMM $qmmmatoms" >> $Project.key
#
# Cycling over the qmnums vector, which is created for VMD selection, by reading
# retnum. i=6 because the 5 QM lysine atoms will be added in the first 5 places.
# i=5 must be used for neutral retinal
#
i=$(($lysqm+1))
while read line; do
      numatom=`echo $line | awk '{ print $1 }'`
      qmnums[$i]=$numatom
      conn1=`echo $line | awk '{ print $7 }'`
#
# When the difference between the atom number numatom and the first field of connectivity
# is large, the C15 atom has been found. Its connectivity field is the lysine N3 number
#
      diff=$(($numatom-$conn1))
      if [[ $diff -gt 50 ]]; then
         lysine=$conn1
      fi
      i=$(($i+1))
done < retnum
#
# Storing the other QM atoms by relative position compared to lysine N3
# Cepsilon,N3, Hepsilon1, Hepsilon2 and nitrogen H, which is not there when retinal is neutral
#
qmnums[1]=$(($lysine-1))
qmnums[2]=$lysine
qmnums[3]=$(($lysine+7))
qmnums[4]=$(($lysine+8))
if [[ $retstereo != "nAT" ]]; then
   qmnums[5]=$(($lysine+9))
fi
#
# MM lysine atoms are calculated like before. Lysine N3 minus 4 is the Cbeta, and so on
# The QMMM section is written with ranges of atoms
#
echo "MM -$(($lysine-4)) $(($lysine-2))" >> $Project.key
echo "MM -$(($lysine+1)) $(($lysine+6))" >> $Project.key
#
# All the QM atoms stored before
#
echo "QM -${qmnums[1]} ${qmnums[2]}" >> $Project.key
echo "QM -${qmnums[3]} ${qmnums[$lysqm]}" >> $Project.key
echo "QM -$startret $endret" >> $Project.key
#
# tuttiatm reads the total number of atoms in the xyz file. Link atom generated by Tinker
# will have tuttiatm+1 as a number. * is for re-use the same key file after xyzedit
#
tuttiatm=`head -n 1 $xyzfile | awk '{ print $1 }'`
echo "*LA $(($tuttiatm+1))" >> $Project.key
#
# Cleaning up
#
rm retnum
#
# Creating the list of QM atoms to be used for VMD selection of the chromophore cavity
#
for ((i=1;i<=$(($lysqm));i=$(($i+1)))); do
    echo -n "${qmnums[$i]} " >> qmserials
done
#
# Asking the user for microiterations ON/OFF
#

##answer=b
##echo ""
##while [[ $answer != y && $answer != n ]]; do
##      echo " Do you want to activate microiterations? (y/n)"
##      read answer
##      echo ""
##done
##case $answer in
##     y) microit=ON
##     ;;
##     n) microit=OFF
##     ;;
##esac
#
# Adding QM/MM keywords and parametrized charges for the lysine sidechains
#
echo "QMMM-ELECTROSTATICS ESPF" >> $Project.key
echo "QMMM-microiteration ON" >> $Project.key
#
# Adding the charges. If retinal is neutral, different charges should be used
#
if [[ $retstereo == "nAT" ]]; then
   cp $templatedir/charges-neu charges
else
   cp $templatedir/charges .
fi
IFS=""
j=$(($lysine-10))
while read line; do
      echo $line | awk '{ sub($2,'"-$j"'); print $0 }' >> $Project.key
      j=$(($j+1))
done < charges
rm charges
#
# Creating the folder for VMD selection
#
mkdir vmdfiles
cd vmdfiles/
#
# Copying the relevant files
#
cp ../conversion/$Project.xyz .
cp ../conversion/$Project.seq .
cp ../$prm .
#
# Adding retinal to the seq file and converting the xyz file to PDB
#
echo "   Z     1  RET" >> $Project.seq
$tinkerdir/xyzpdb $Project.xyz << EOF
ALL
../$prm
EOF
#
# Copying the required files into vmdfiles and running vmdsel.sh
# atom numbers are copied into active.key in the main folder
#
cp $templatedir/ASEC/vmdsel_old.sh .
cp ../qmserials .
grep RET $Project.pdb | awk '{ print $2 }' >> qmserials
./vmdsel_old.sh $Project
cp qmmm.dat ../active.key
cd ..
rm qmserials
#
# VIM script to generate the ACTIVE $number style of Tinker key file
#
echo ":%s/ /\r/g" > activator.vim
echo ":%s/^/ACTIVE /" >> activator.vim
echo ":x" >> activator.vim
vim -es active.key < activator.vim
rm activator.vim
cat $Project.key active.key > temp.key
mv temp.key $Project.key
rm active.key

#
# Adding the QM atoms to the active atoms, at the bottom of the key file
# Using the same lines as the QMMM section
#
echo "ACTIVE -${qmnums[1]} ${qmnums[2]}" >> $Project.key
echo "ACTIVE -${qmnums[3]} ${qmnums[$lysqm]}" >> $Project.key
echo "ACTIVE -$startret $endret" >> $Project.key
echo "*ACTIVE $(($tuttiatm+1))" >> $Project.key
#
# Backing up the initial Tinker files
#
mkdir tkstartfiles
cp $Project.xyz tkstartfiles/
cp $Project.key tkstartfiles/
#
# xyzedit generates the Molcas input file and adds the link atom
#

$tinkerdir/xyzedit $Project.xyz <<EOF
20
1
EOF

##########
###########
# This section is for generating the gateway of the input
# without the tk-gro roundng in the chromo-LYS coordinates
###########
###########
#if [[ $Step -ne 0 ]]; then

#   mkdir input_top
#   cd input_top
#   cp ../*.Final_last.xyz tempxyz
#   echo "  $numatom" > $Project.xyz
#   head -n $(($numatom+1)) tempxyz | tail -n $numatom >> $Project.xyz
#   cp ../$prm .
#   cp ../$Project.key .
#   $tinkerdir/xyzedit $Project.xyz <<EOF
#20
#1
#EOF
#   echo ':%s/\.\.\.\.\.\./\.3-21G/' > qmmmlabel.vim
#   echo ':%s/\.3-21G\ \/\ MM/\.\.\.\.\.\.\ \/\ MM/' >> qmmmlabel.vim
#   echo ':/Seward' >> qmmmlabel.vim
#   echo ':.,$d' >> qmmmlabel.vim
#   echo ':x' >> qmmmlabel.vim
#   vim -es $Project.input < qmmmlabel.vim
#   rm qmmmlabel.vim
#
#   linkx=`tail -n1 tempxyz | awk '{ print $3 }'`
#   linky=`tail -n1 tempxyz | awk '{ print $4 }'`
#   linkz=`tail -n1 tempxyz | awk '{ print $5 }'`
#   linkat=`tail -n4 $Project.input | head -n1 | awk '{ print $1 }'`
#   lines=`wc -l $Project.input | awk '{ print $1 }'`
#   head -n $(($lines-4)) $Project.input > $Project.input_2
#   echo " $linkat         $linkx   $linky   $linkz  Angstrom" >> $Project.input_2
#   echo " End of Basis" >> $Project.input_2
#   echo "" >> $Project.input_2
#   echo "" >> $Project.input_2
#   mv $Project.input_2 $Project.input
#   cp $Project.input ../
#   cd ..
#   rm -r input_top
#else
   echo ':%s/\.\.\.\.\.\./\.3-21G/' > qmmmlabel.vim
   echo ':%s/\.3-21G\ \/\ MM/\.\.\.\.\.\.\ \/\ MM/' >> qmmmlabel.vim
   echo ':/Seward' >> qmmmlabel.vim
   echo ':.,$d' >> qmmmlabel.vim
   echo ':x' >> qmmmlabel.vim
   vim -es $Project.input < qmmmlabel.vim
   rm qmmmlabel.vim
#fi

########################################################
########################################################

#
# Preparing the final versions of the Tinker files, to be used in all the following QM/MM calculations
#
mv $Project.xyz_2 $Project.xyz 
sed -i "s/QMMM $qmmmatoms/QMMM $(($qmmmatoms+1))/; s/*LA/LA/; s/*ACTIVE/ACTIVE/" $Project.key

#
# Messages to the user
#
echo ""
echo " Tinker files ready! Proceeding to the QM/MM calculations"
echo ""
